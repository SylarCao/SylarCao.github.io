<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title></title>
   <link href="" rel="self" type="application/atom+xml"/>
   <link href="" rel="alternate" type="text/html" />
   <updated>2015-12-30T09:28:55+08:00</updated>
   <id></id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>用户想要的功能就该给吗？新产品开发如何跳出“死亡循环”【转】</title>
     <link href="http://beiyuu.com/blog/2015/07/09/user-requirement.html"/>
     <updated>2015-07-09T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/07/09/user_requirement</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://36kr.com/p/5035284.html&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;转自：http://36kr.com/p/5035284.html&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;新产品在推广过程中肯定会遇到很多障碍，如果处理不好则有可能会陷入到“产品死亡循环”（Product Death Cycle）。这个概念是一年前我从管理咨询顾问David Bland那里学到的，他当时发表了一条推文：&lt;/p&gt;
&lt;blockquote&gt;这就是我所说的产品死亡循环——@davidbland&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&quot;Image title&quot; src=&quot;http://a.36krcnd.com/nil_class/9ca04e00-e572-48ed-bc59-32cbcde11f5d/product_death_cycle.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;没人使用我们的产品→询问消费者缺少了什么功能→开发缺失的功能&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一年过去了，这条推文引发了许多人的共鸣，因为我们见证过太多次“产品死亡循环”的发生，很多人也曾亲身经历过类似的困境。&lt;/p&gt;
&lt;p&gt;那么，到底为什么会出现这种现象，又该如何避免呢？我们首先来分析一下产品死亡循环的3个环节：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）没人使用我们的产品&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于任何新产品来说，没人使用都是正常现象，所以没有用户并不可怕，但此时你的应对方式则有可能使你陷入产品死亡循环中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）询问消费者缺少了什么功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;产品开发人员在早期很容易犯的一个错误就是完全被用户牵着鼻子走，而没有自己的产品观。这种错误的表现形式就是询问消费者“还缺少什么功能？”。但是这类问题实际上并不能帮到你，有以下几点原因：&lt;/p&gt;
&lt;ul&gt;   &lt;li&gt;现阶段喜爱你产品的用户并不一定能代表更广大市场上那些还没有用过你产品的人。所以，你现在得到的反馈只代表一小部分群体，他们推荐的功能可能并不是主流用户所需要的。&lt;/li&gt;   &lt;li&gt;在遇到设计上的问题时，用户调查非常有效，但你不能指望用户拿出他们的解决方案，这是你的工作！他们在遇到一个特定的问题时，可能并没有足够的工具或技能来解决。比如在没有汽车之前，人们想要更加快捷的交通，只能寄希望拥有一匹跑得更快的马。&lt;/li&gt;   &lt;li&gt;“还缺少什么功能？”这样的问题是建立在一个错误的基础上的，那就是认为增加了用户所需的功能就能解决产品遇到的障碍了。但实际上，产品开发遇到困难的原因可能是多方面的，比如是不是定价出了问题？是不是市场营销做的不好？产品的激活方式有没有问题？产品的布局是不是很糟糕？&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;所以，不要问用户还需要什么样的功能，你应该寻找用户不喜爱产品的根本原因，了解产品发展的瓶颈究竟在哪。实际上，&lt;a href=&quot;http://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/&quot; target=&quot;_blank&quot;&gt;有调查显示&lt;/a&gt;，对于很多产品来说，有80%的日活用户会在30天之内放弃产品，也就是说很多用户在没有深入体验你的产品时可能就已经离开了。在这种情况下，询问用户需要什么样的功能并没有太大帮助，只会给你的产品添加一大堆乱七八糟的功能，最终结果只能是把用户进一步推向竞争对手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）开发缺失的功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多开发者在听从了用户的需求之后就开始补全这些“缺失”的功能了。他们错误地认为，只要加上一两个新功能，用户就会接受整个产品了。&lt;/p&gt;
&lt;p&gt;实际上，对于一款产品来说，从访问到注册再到持续使用的每个环节损失的用户都是非常多的。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image title&quot; src=&quot;http://a.36krcnd.com/nil_class/041cefef-cb4a-47a8-95f6-862e95361b3e/Screenshot-2015-05-31-19.50.54.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;访问——注册——开始使用——第1天——第7天——第30天&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;用户与产品的大多数交互都发生在最初几次访问上。因此，为了更长久地留存用户，你需要在这个环节多下功夫，要给用户足够的惊喜。相反，开发一堆“缺失的”功能根本无法补齐用户体验最薄弱的地方，也就是用户最先接触产品的部分。如果你开发的新功能主要是加强产品的核心部分，那么你必须同步提升产品的整体使用流程，否则用户根本深入不到这里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳出产品死亡循环&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要跳出产品死亡循环其实并不容易，因为处在这个循环中的人往往认为自己在做正确的事情——听从用户需求、满足用户需求。但是，正确的动机并不一定会带来好的结果，满足了用户对某个特定功能的需求并没有真正帮他们解决问题。你所应该做的，就是不断地刨根问底，理解阻碍产品发展的根本原因是什么。&lt;/p&gt;
&lt;p&gt;这个根本原因可以从多方面去寻找，比如市场营销、定价、产品布局、分发、公关、内容营销等等；也有可能是产品的战略出了问题：是走高端路线还是保持低端亲民？是开发一款实用的工具型的产品还是一款利用网络效应的社交产品。具体的方法有很多，但是核心的一点在于：你对于产品做出的任何修改都应该是为了解决产品发展中的根本问题，而不是产品团队不断开发新功能的冲动。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用【转】</title>
     <link href="http://beiyuu.com/blog/2015/06/03/gcd.html"/>
     <updated>2015-06-03T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/06/03/gcd</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/totogo2010/article/details/8016129&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;转自：http://blog.csdn.net/totogo2010/article/details/8016129&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;article_content&quot; class=&quot;article_content&quot;&gt;
&lt;h1&gt;介绍：&lt;/h1&gt;
&lt;p&gt;Grand Central Dispatch 简称（GCD）是苹果公司开发的技术，以优化的应用程序支持多核心处理器和其他的对称多处理系统的系统。这建立在任务并行执行的线程池模式的基础上的。它首次发布在Mac OS X 10.6 ，iOS 4及以上也可用。&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;t1&quot;&gt;&lt;/a&gt;设计：&lt;/h1&gt;&lt;p&gt;GCD的工作原理是：让程序平行排队的特定任务，根据可用的处理资源，安排他们在任何可用的处理器核心上执行任务。&lt;/p&gt;&lt;p&gt;一个任务可以是一个函数(function)或者是一个&lt;a href=&quot;http://blog.csdn.net/totogo2010/article/details/7839061&quot; target=&quot;_blank&quot;&gt;block&lt;/a&gt;。&amp;nbsp;GCD的底层依然是用线程实现，不过这样可以让程序员不用关注实现的细节。&lt;/p&gt;&lt;p&gt;GCD中的FIFO队列称为dispatch queue，它可以保证先进来的任务先得到执行&lt;br /&gt;dispatch queue分为下面三种：&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;t2&quot;&gt;&lt;/a&gt;&lt;strong&gt;Serial&lt;/strong&gt;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/h2&gt;&lt;p&gt;又称为private dispatch queues，同时只执行一个任务。Serial queue通常用于同步访问特定的资源或数据。当你创建多个Serial queue时，虽然它们各自是同步执行的，但Serial queue与Serial queue之间是并发执行的。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;t3&quot;&gt;&lt;/a&gt;&lt;strong&gt;Concurrent&lt;/strong&gt;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p&gt;又称为global dispatch queue，可以并发地执行多个任务，但是执行完成的顺序是随机的。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;t4&quot;&gt;&lt;/a&gt;&lt;strong&gt;Main dispatch queue&lt;/strong&gt;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p&gt;它是全局可用的serial queue，它是在应用程序主线程上执行任务的。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;我们看看dispatch queue如何使用&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;t5&quot;&gt;&lt;/a&gt;1、常用的方法dispatch_async&lt;/h1&gt;&lt;p&gt;为了避免界面在处理耗时的操作时卡死，比如读取网络数据，IO,数据库读写等，我们会在另外一个线程中处理这些操作，然后通知主线程更新界面。&lt;/p&gt;&lt;p&gt;用GCD实现这个流程的操作比前面介绍的NSThread &amp;nbsp;NSOperation的方法都要简单。代码框架结构如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;dp-highlighter bg_cpp&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[cpp]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 404px; top: 953px; width: 18px; height: 18px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_1&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; width=&quot;18&quot; height=&quot;18&quot; name=&quot;ZeroClipboardMovie_1&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=1&amp;amp;width=18&amp;amp;height=18&quot; wmode=&quot;transparent&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-cpp&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,&amp;nbsp;0),&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;耗时的操作&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dispatch_async(dispatch_get_main_queue(),&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;更新界面&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;pre name=&quot;code&quot; class=&quot;cpp&quot; style=&quot;display: none;&quot;&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 耗时的操作
    dispatch_async(dispatch_get_main_queue(), ^{
        // 更新界面
    });
});
&lt;/pre&gt;如果这样还不清晰的话，那我们还是用上两篇博客中的下载图片为例子，代码如下：&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;dp-highlighter bg_cpp&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[cpp]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 404px; top: 1156px; width: 18px; height: 18px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_2&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; width=&quot;18&quot; height=&quot;18&quot; name=&quot;ZeroClipboardMovie_2&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=2&amp;amp;width=18&amp;amp;height=18&quot; wmode=&quot;transparent&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-cpp&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,&amp;nbsp;0),&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSURL&amp;nbsp;*&amp;nbsp;url&amp;nbsp;=&amp;nbsp;[NSURL&amp;nbsp;URLWithString:@&lt;span class=&quot;string&quot;&gt;&quot;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&quot;&lt;/span&gt;&lt;span&gt;];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSData&amp;nbsp;*&amp;nbsp;data&amp;nbsp;=&amp;nbsp;[[NSData&amp;nbsp;alloc]initWithContentsOfURL:url];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UIImage&amp;nbsp;*image&amp;nbsp;=&amp;nbsp;[[UIImage&amp;nbsp;alloc]initWithData:data];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;span&gt;&amp;nbsp;(data&amp;nbsp;!=&amp;nbsp;nil)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dispatch_async(dispatch_get_main_queue(),&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.imageView.image&amp;nbsp;=&amp;nbsp;image;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;pre name=&quot;code&quot; class=&quot;cpp&quot; style=&quot;display: none;&quot;&gt;    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSURL * url = [NSURL URLWithString:@&quot;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&quot;];
        NSData * data = [[NSData alloc]initWithContentsOfURL:url];
        UIImage *image = [[UIImage alloc]initWithData:data];
        if (data != nil) {
            dispatch_async(dispatch_get_main_queue(), ^{
                self.imageView.image = image;
             });
        }
    });&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;运行显示：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201209/23/1348412756_8445.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;是不是代码比NSThread &amp;nbsp;NSOperation简洁很多，而且GCD会自动根据任务在多核处理器上分配资源，优化程序。&lt;p&gt;系统给每一个应用程序提供了三个concurrent dispatch queues。这三个并发调度队列是全局的，它们只有优先级的不同。因为是全局的，我们不需要去创建。我们只需要通过使用函数dispath_get_global_queue去得到队列，如下：&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;dp-highlighter bg_cpp&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[cpp]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 404px; top: 2099px; width: 18px; height: 18px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_3&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; width=&quot;18&quot; height=&quot;18&quot; name=&quot;ZeroClipboardMovie_3&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=3&amp;amp;width=18&amp;amp;height=18&quot; wmode=&quot;transparent&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-cpp&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;dispatch_queue_t&amp;nbsp;globalQ&amp;nbsp;=&amp;nbsp;dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,&amp;nbsp;0);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;pre name=&quot;code&quot; class=&quot;cpp&quot; style=&quot;display: none;&quot;&gt;dispatch_queue_t globalQ = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);  &lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里也用到了系统默认就有一个串行队列main_queue&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;dp-highlighter bg_cpp&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[cpp]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 404px; top: 2212px; width: 18px; height: 18px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_4&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; width=&quot;18&quot; height=&quot;18&quot; name=&quot;ZeroClipboardMovie_4&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=4&amp;amp;width=18&amp;amp;height=18&quot; wmode=&quot;transparent&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-cpp&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;dispatch_queue_t&amp;nbsp;mainQ&amp;nbsp;=&amp;nbsp;dispatch_get_main_queue();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;pre name=&quot;code&quot; class=&quot;cpp&quot; style=&quot;display: none;&quot;&gt;dispatch_queue_t mainQ = dispatch_get_main_queue();  &lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然dispatch queue是引用计数的对象，但是以上两个都是全局的队列，不用retain或release。&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;t6&quot;&gt;&lt;/a&gt;2、dispatch_group_async的使用&lt;/h1&gt;&lt;p&gt;dispatch_group_async可以实现监听一组任务是否完成，完成后得到通知执行其他的操作。这个方法很有用，比如你执行三个下载任务，当三个任务都下载完成后你才通知界面说完成的了。下面是一段例子代码：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;dp-highlighter bg_cpp&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[cpp]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 404px; top: 2403px; width: 18px; height: 18px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_5&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; width=&quot;18&quot; height=&quot;18&quot; name=&quot;ZeroClipboardMovie_5&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=5&amp;amp;width=18&amp;amp;height=18&quot; wmode=&quot;transparent&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-cpp&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;dispatch_queue_t&amp;nbsp;queue&amp;nbsp;=&amp;nbsp;dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,&amp;nbsp;0);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;dispatch_group_t&amp;nbsp;group&amp;nbsp;=&amp;nbsp;dispatch_group_create();&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;dispatch_group_async(group,&amp;nbsp;queue,&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[NSThread&amp;nbsp;sleepForTimeInterval:1];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;group1&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;dispatch_group_async(group,&amp;nbsp;queue,&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[NSThread&amp;nbsp;sleepForTimeInterval:2];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;group2&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;dispatch_group_async(group,&amp;nbsp;queue,&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[NSThread&amp;nbsp;sleepForTimeInterval:3];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;group3&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;dispatch_group_notify(group,&amp;nbsp;dispatch_get_main_queue(),&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;updateUi&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;dispatch_release(group);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;pre name=&quot;code&quot; class=&quot;cpp&quot; style=&quot;display: none;&quot;&gt;    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_group_t group = dispatch_group_create();
    dispatch_group_async(group, queue, ^{
        [NSThread sleepForTimeInterval:1];
        NSLog(@&quot;group1&quot;);
    });
    dispatch_group_async(group, queue, ^{
        [NSThread sleepForTimeInterval:2];
        NSLog(@&quot;group2&quot;);
    });
    dispatch_group_async(group, queue, ^{
        [NSThread sleepForTimeInterval:3];
        NSLog(@&quot;group3&quot;);
    });
    dispatch_group_notify(group, dispatch_get_main_queue(), ^{
        NSLog(@&quot;updateUi&quot;);
    });
    dispatch_release(group);
&lt;/pre&gt;dispatch_group_async是异步的方法，运行后可以看到打印结果：&lt;p&gt;&lt;/p&gt;&lt;p&gt;2012-09-25 16:04:16.737 gcdTest[43328:11303] group1&lt;br /&gt;2012-09-25 16:04:17.738 gcdTest[43328:12a1b] group2&lt;br /&gt;2012-09-25 16:04:18.738 gcdTest[43328:13003] group3&lt;br /&gt;2012-09-25 16:04:18.739 gcdTest[43328:f803] updateUi&lt;br /&gt;&lt;/p&gt;&lt;p&gt;每个一秒打印一个，当第三个任务执行后，upadteUi被打印。&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;t7&quot;&gt;&lt;/a&gt;3、dispatch_barrier_async的使用&lt;/h1&gt;&lt;p&gt;dispatch_barrier_async是在前面的任务执行结束后它才执行，而且它后面的任务等它执行完成之后才会执行&lt;/p&gt;&lt;p&gt;例子代码如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;dp-highlighter bg_cpp&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[cpp]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 404px; top: 3056px; width: 18px; height: 18px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_6&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; width=&quot;18&quot; height=&quot;18&quot; name=&quot;ZeroClipboardMovie_6&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=6&amp;amp;width=18&amp;amp;height=18&quot; wmode=&quot;transparent&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-cpp&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;dispatch_queue_t&amp;nbsp;queue&amp;nbsp;=&amp;nbsp;dispatch_queue_create(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;gcdtest.rongfzh.yc&quot;&lt;/span&gt;&lt;span&gt;,&amp;nbsp;DISPATCH_QUEUE_CONCURRENT);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;dispatch_async(queue,&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[NSThread&amp;nbsp;sleepForTimeInterval:2];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;dispatch_async1&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;dispatch_async(queue,&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[NSThread&amp;nbsp;sleepForTimeInterval:4];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;dispatch_async2&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;dispatch_barrier_async(queue,&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;dispatch_barrier_async&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[NSThread&amp;nbsp;sleepForTimeInterval:4];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;dispatch_async(queue,&amp;nbsp;^{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[NSThread&amp;nbsp;sleepForTimeInterval:1];&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;dispatch_async3&quot;&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;});&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;pre name=&quot;code&quot; class=&quot;cpp&quot; style=&quot;display: none;&quot;&gt;    dispatch_queue_t queue = dispatch_queue_create(&quot;gcdtest.rongfzh.yc&quot;, DISPATCH_QUEUE_CONCURRENT);
    dispatch_async(queue, ^{
        [NSThread sleepForTimeInterval:2];
        NSLog(@&quot;dispatch_async1&quot;);
    });
    dispatch_async(queue, ^{
        [NSThread sleepForTimeInterval:4];
        NSLog(@&quot;dispatch_async2&quot;);
    });
    dispatch_barrier_async(queue, ^{
        NSLog(@&quot;dispatch_barrier_async&quot;);
        [NSThread sleepForTimeInterval:4];

    });
    dispatch_async(queue, ^{
        [NSThread sleepForTimeInterval:1];
        NSLog(@&quot;dispatch_async3&quot;);
    });&lt;/pre&gt;&lt;br /&gt;打印结果：&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;2012-09-25 16:20:33.967 gcdTest[45547:11203] dispatch_async1&lt;/strong&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;2012-09-25 16:20:35.967 gcdTest[45547:11303] dispatch_async2&lt;/strong&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;2012-09-25 16:20:35.967 gcdTest[45547:11303] dispatch_barrier_async&lt;/strong&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;2012-09-25 16:20:40.970 gcdTest[45547:11303] dispatch_async3&lt;/strong&gt;&lt;/p&gt;请注意执行的时间，可以看到执行的顺序如上所述。&lt;h1&gt;&lt;a name=&quot;t8&quot;&gt;&lt;/a&gt;4、dispatch_apply&amp;nbsp;&lt;/h1&gt;&lt;p&gt;执行某个代码片段N次。&lt;br /&gt;dispatch_apply(5, globalQ, ^(size_t index) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; // 执行5次&lt;br /&gt;});&lt;/p&gt;
  &lt;/div&gt;

</content>
   </entry>
   
   <entry>
     <title>网易新闻iOS版使用的18个开源组件【转】</title>
     <link href="http://beiyuu.com/blog/2015/05/25/wangyi-ios.html"/>
     <updated>2015-05-25T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/05/25/wangyi_ios</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20150522/11884.html&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;转自：http://www.cocoachina.com/ios/20150522/11884.html&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;detail-main&quot;&gt;

      &lt;div id=&quot;detailbody&quot; class=&quot;field_body&quot;&gt;
        &lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://cc.cocimg.com/api/uploads/20150520/1432087880692685.jpg&quot; title=&quot;1432087880692685.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;&lt;p&gt;网易新闻iOS版在开发过程中曾经使用过的第三方开源类库、组件&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;AFNetworking&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;&lt;a href=&quot;http://www.jianshu.com/p/8952944f7566&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Apple Reachability&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 网络监测，可以参考下这篇文章&lt;a href=&quot;http://www.jianshu.com/p/efcfa3c87306&quot; target=&quot;_blank&quot;&gt;iOS网络监测如何区分2、3、4G?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;&lt;a href=&quot;https://github.com/douban/DOUAudioStreamer&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;DOUAudioStreamer&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 豆瓣的开源软件，DOUAudioStreamer 是 iOS 和 Mac 的基于核心音频的流媒体音频播放器&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、&lt;/strong&gt;&lt;a href=&quot;https://github.com/nicklockwood/FXBlurView&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;FXBlurView&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; iOS 模糊背景类库, 可以方便的根据底层显示的状态生成模糊效果&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5、&lt;/strong&gt;&lt;a href=&quot;https://github.com/siriusdely/GTMNSString-HTML&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;GTMNSString+HTML&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 谷歌开源的用于过滤HTML标签&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6、&lt;/strong&gt;&lt;a href=&quot;https://github.com/nicklockwood/iCarousel&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;iCarousel&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;7、&lt;/strong&gt;&lt;a href=&quot;https://github.com/jaydee3/JDStatusBarNotification&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;JDStatusBarNotification&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器&lt;/p&gt;&lt;p&gt;&lt;strong&gt;8、&lt;/strong&gt;&lt;a href=&quot;https://github.com/webmproject/libwebp&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;libwebp&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 可用于webp的移植，具体还是去看git吧&lt;/p&gt;&lt;p&gt;&lt;strong&gt;9、&lt;/strong&gt;&lt;a href=&quot;https://github.com/SnapKit/Masonry&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;masonry&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备&lt;/p&gt;&lt;p&gt;&lt;strong&gt;10、&lt;/strong&gt;&lt;a href=&quot;https://github.com/mattgemmell/MGTemplateEngine&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;MGTemplateEngine&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;11、&lt;/strong&gt;&lt;a href=&quot;https://github.com/ninjinkun/NJKWebViewProgress&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;NJKWebViewProgress&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; NJKWebViewProgress 是一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;12、&lt;/strong&gt;&lt;a href=&quot;https://github.com/facebook/pop&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; Facebook 开源的iOS 动画库, 集合了很多动画效果&lt;/p&gt;&lt;p&gt;&lt;strong&gt;13、&lt;/strong&gt;&lt;a href=&quot;https://github.com/wezm/RegexKitLite&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;RegexKitLite&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 用来处理正则表达式&lt;/p&gt;&lt;p&gt;&lt;strong&gt;14、&lt;/strong&gt;&lt;a href=&quot;https://github.com/rs/SDWebImage&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;SDWebImage&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 常用于对从服务器端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单&lt;/p&gt;&lt;p&gt;&lt;strong&gt;15、&lt;/strong&gt;&lt;a href=&quot;https://github.com/soffes/sskeychain&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;SSKeychain&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置&lt;/p&gt;&lt;p&gt;&lt;strong&gt;16、&lt;/strong&gt;&lt;a href=&quot;https://github.com/TTTAttributedLabel/TTTAttributedLabel&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;TTTAttributedLabel&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能&lt;/p&gt;&lt;p&gt;&lt;strong&gt;17、&lt;/strong&gt;&lt;a href=&quot;https://github.com/probablycorey/wax&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;wax&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; Wax 就是使用 Lua 脚本语言来编写 ios原生应用 的一个框架,它把Lua脚本语言和原生 Objective-C 应用编程接口(API)结合起来&lt;/p&gt;&lt;p&gt;&lt;strong&gt;18、&lt;/strong&gt;&lt;a href=&quot;https://github.com/mattconnolly/ZipArchive&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;ZipArchive&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; 可用于压缩和解压缩文件&lt;/p&gt;
      &lt;/div&gt;

    &lt;/div&gt;

</content>
   </entry>
   
   <entry>
     <title>讲述一个程序员眼中的北京和上海 【转】</title>
     <link href="http://beiyuu.com/blog/2015/05/18/beijing-shanghai.html"/>
     <updated>2015-05-18T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/05/18/beijing_shanghai</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/programmer/20150515/11825.html&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;转自：http://www.cocoachina.com/programmer/20150515/11825.html&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;detail-main&quot;&gt;


      &lt;div id=&quot;detailbody&quot; class=&quot;field_body&quot;&gt;
        &lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://cc.cocimg.com/api/uploads/20150513/1431499983427510.jpg&quot; title=&quot;1431499983427510.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;作者：叶孤城___&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 176, 80);&quot;&gt;&lt;strong&gt;面积&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;北京：16410.54平方公里&lt;/p&gt;&lt;p&gt;上海：6,340.5平方公里&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: rgb(0, 176, 80);&quot;&gt;人口&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;北京：2151.6万人&lt;/p&gt;&lt;p&gt;上海：2,500万&lt;/p&gt;&lt;p&gt;光看数字可能在北京长住但没在上海住过的朋友肯定觉得上海的交通情况非常恐怖。&lt;/p&gt;&lt;p&gt;想一想也可以知道，2500万人口/6340.5平方公里怎么算也比北京人口密度大。&lt;/p&gt;&lt;p&gt;实际上并非如此。&lt;/p&gt;&lt;p&gt;我大学是在北京华北电力大学，在北京昌平区的回龙观附近，大学毕业之后租的地方也一直在回龙观，原因无他，一是熟悉，二是租房价格便宜。&lt;/p&gt;&lt;p&gt;在北京待过的人肯定都知道，天通苑和回龙观基本上大学生和外来人口最常住的地方了。因为这两个地方在五环至六环左右，地理位置较偏僻，所以房租肯定相应的会便宜不少。&lt;/p&gt;&lt;p&gt;而且回龙观又有两个地铁站，龙泽站和回龙观站，所以出行还算方便。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;但是，问题来了。北京的城市规划非常有问题，简单来说，就是聚集现象非常严重。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;举个简单的例子，我每天早上上班都会去回龙观地铁，因此发现了一个非常有趣的现象，在13号线上，西直门方向的人往往会爆满，但是对面去东直门的人数相比之下要少了差不多5成。&lt;/p&gt;&lt;p&gt;那么必然，下班的时候人流总量刚好相反了。&lt;/p&gt;&lt;p&gt;可以看出，北京大部分的办公地点都在西边，住的大部分在东边。&lt;/p&gt;&lt;p&gt;再往深里想，海淀区是高校云集的地方，有清华，北大，地质大学，北京语言大学，北航，中国农大，中国矿大，北科，那么公司为了方便招人，是不是选址的地方会优先往这些地方靠呢？&lt;/p&gt;&lt;p&gt;导致了公司大部分在西边。&lt;/p&gt;&lt;p&gt;而东直门附近聚集了北京大量的商场和食肆，还有工体，夜店等等。生活化的地方自然就会吸引人去居住。&lt;/p&gt;&lt;p&gt;这样导致的问题就是，上班大家一窝蜂去西直门方向，下班了大家一窝蜂的去东直门方向，我在北京工作的这几年时间基本上都花在了交通工具上，曾经我有一份工作在国贸附近，我的线路是怎样的呢？&lt;/p&gt;&lt;p&gt;13号线回龙观-&amp;gt;芍药居（共计6站）-&amp;gt;换乘十号线 -&amp;gt;金台夕照站（共计七站）然后走路到公司，总计一个小时三十分钟。更SB的是，我13年养了一只阿拉斯加，我每天要早起半个小时遛狗&lt;/p&gt;&lt;p&gt;，所以我每天需要在六点半起床，溜半个小时狗，七点回去10分钟洗漱，出门。到公司大概8点五十左右，勉强能在9点之前到。&lt;/p&gt;&lt;p&gt;当时技术还不太行，工作内容又偏难（地图，短视频录制，音频压缩，各种动画交互），所以每天压力很大。搞得我那段时间掉头发，洗澡的时候一搓就是一坨头发。那会体重也是高中之后&lt;/p&gt;&lt;p&gt;最轻的70kg左右（我现在已经飙到85kg了）。现在想了一下当时的压力到底源于何处？其实不是生存压力，因为我父母都是医生，家里完全不用靠我。而且父母时常调侃我说混不下去给你买几百只羊回新疆放羊算了。所以不存在所谓的生存压力，主要的压力还是技术上的不足导致的焦虑感。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;说完坏处了，好处有没有呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当然有，技术突飞猛进。&lt;/p&gt;&lt;p&gt;我把11年，12年wwdc的有关音视频还有地图的session都扫了一遍。而且因为我做的东西非常杂，所以我每个方面都有涉猎。举个例子就好比刀枪剑戟，斧钺钩叉我都会一点，虽然不精通&lt;/p&gt;&lt;p&gt;但是好处是以后无论碰到什么我都能迅速定位对应的资料应该去哪找。&lt;/p&gt;&lt;p&gt;第二个好处就是英语能力爆棚，简直到了人生巅峰状态。为什么？因为之前的公司有印度，法国，西班牙，南非，加拿大，比利时。我能听懂各种口音的英文。所以看wwdc视频的时候&lt;/p&gt;&lt;p&gt;也比较轻松了。&lt;/p&gt;&lt;p&gt;我一直觉得如果数学和英文水平好，学习编程简直就是水到渠成的事情。&lt;/p&gt;&lt;p&gt;一不小心说了一堆闲话。接着说正题。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那么问题来了，北京到底好在哪里？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;简单来说，北京是一个巨适合菜鸟和高手的地方。&lt;/p&gt;&lt;p&gt;why?&lt;/p&gt;&lt;p&gt;对菜鸟来说，北京有数不清的技术大牛和每天能让你打鸡血一样往前冲的动力。&lt;/p&gt;&lt;p&gt;对高手来说，北京有数不完的机会和超级棒的融资环境，还有超高的概率找到合适的创业伙伴。&lt;/p&gt;&lt;p&gt;但是对于止步不前的中手来说是地狱。&lt;/p&gt;&lt;p&gt;why?&lt;/p&gt;&lt;p&gt;来思考一下中手这个定义是什么。&lt;/p&gt;&lt;p&gt;我姑且定义为，工作较为稳定，但是再往前一步较为困难。因为如果是技术上再往前一步会比以前更加的困难，因为10分到70分，和70分到80分不是一个难度等级。&lt;/p&gt;&lt;p&gt;从80分到90分那又是另外一种。&lt;/p&gt;&lt;p&gt;岗位上，由于性格等问题，也很难往上爬。大家都在说30岁以后转管理，简单问一句，你以为你以为的就是你以为的么？凭什么让你管理而不是你被管理？你有什么特殊能力让别人赏识？&lt;/p&gt;&lt;p&gt;生活上，可能已经有稳定的女朋友或者已经结婚了。但是不一定有房子，或者有房子但仍然在付房贷。生活紧巴巴的。这种情况就更难让人断然做出改变。因为这时候贸然的一个改变可能就不是阵痛了&lt;/p&gt;&lt;p&gt;，而是痛不欲生。因为你已经不是一人吃饱，全家不饿的境况了。你身上负担的是一家子的压力。&lt;/p&gt;&lt;p&gt;我比较推荐刚毕业的大学生去北京闯一闯，去体验一下大都市的生活。我觉得对自己是一种锤炼，而且如果你是干it的，肯定在技术上会有很大的提升。这是别的城市所无法给你的。&lt;/p&gt;&lt;p&gt;在北京的每一天，我早上起来走在路上都只有一个想法，玩命学玩命干。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 176, 80);&quot;&gt;&lt;strong&gt;说完北京，说说上海。&lt;/strong&gt;&lt;/span&gt;由于我刚在上海待了一个月多点。所以从认知程度上肯定是要远逊于北京的。所以简单的聊一聊。&lt;/p&gt;&lt;p&gt;大众对两个城市的普遍印象是什么？&lt;/p&gt;&lt;p&gt;北京：政治文化中心&lt;/p&gt;&lt;p&gt;上海：金融中心&lt;/p&gt;&lt;p&gt;so,政治文化 == 生活化有情调，金融中心 == 什么都死贵死贵。&lt;/p&gt;&lt;p&gt;哈哈，原谅我如此简单粗暴，但问题是我以前真的是这么认为的。&lt;/p&gt;&lt;p&gt;但实际上呢？上海完全不是什么都死贵死贵，起码衣食这两点和北京差不多，行这点稍贵，住比北京便宜。北京实际上已经不适宜居住了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;上海是个生活气息非常浓的城市，&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;为什么这么说？&lt;/p&gt;&lt;p&gt;跟前文说的城市规划很有关系。北京是个聚集非常严重的城市，就是工作地点一窝蜂的在一起，住的地方又一窝蜂的在一起。所以导致上班的时候都往一个地方跑，&lt;/p&gt;&lt;p&gt;下班的时候也都往一个地方跑。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;而上海是以小区为单位辐射状的。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;每一个小区，出来走不了几步你就能找到你想要的，看电影，逛商场，唱歌，周边基本上都有。虽然规模都不大，但是装修的都有模有样。小而美。&lt;/p&gt;&lt;p&gt;北京大气是大气，电影院商场娱乐场所都特别高大上，但是架不住远啊。&lt;/p&gt;&lt;p&gt;我现在骑自行车上下班，因为上海的自行车道非常完善，基本每条路都有自行车道。二是由于房租比较便宜所以我可以租在公司附近，每天5分钟就到了。&lt;/p&gt;&lt;p&gt;工作压力也比较小，因为现在的公司完全是谷歌式的管理。不用打卡，弹性工作制，连工位都不固定，你随便坐，躺着办公也行。&lt;/p&gt;&lt;p&gt;公司妹子又多，每天赏心悦目的。&lt;strong&gt;所以我觉得上海总体上压力要比北京小很多。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;仅是我个人的一些看法，希望能给大家一些帮助。&lt;/p&gt;&lt;p&gt;如果人生是一场比赛，那赢家为什么不能是我？&lt;/p&gt;&lt;p&gt;你们说呢？&lt;/p&gt;
      &lt;/div&gt;



    &lt;/div&gt;
</content>
   </entry>
   
   <entry>
     <title>NSString属性什么时候用copy，什么时候用strong?</title>
     <link href="http://beiyuu.com/blog/2015/05/12/nsstring.html"/>
     <updated>2015-05-12T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/05/12/nsstring</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20150512/11805.html&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;转自：http://www.cocoachina.com/ios/20150512/11805.html&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;detail-main&quot;&gt;

      &lt;div id=&quot;detailbody&quot; class=&quot;field_body&quot;&gt;
        &lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://cc.cocimg.com/api/uploads/20150511/1431326886880460.jpg&quot; title=&quot;1431326886880460.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;&lt;p&gt;我们在声明一个NSString属性时，对于其内存相关特性，通常有两种选择(基于ARC环境)：strong与copy。那这两者有什么区别呢？什么时候该用strong，什么时候该用copy呢？让我们先来看个例子。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 176, 80);&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们定义一个类，并为其声明两个字符串属性，如下所示：&lt;/p&gt;&lt;div&gt;&lt;div id=&quot;highlighter_381091&quot; class=&quot;syntaxhighlighter  js&quot;&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line number4 index3 alt1&quot;&gt;4&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;@interface&amp;nbsp;TestStringClass&amp;nbsp;()&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;@property&amp;nbsp;(nonatomic,&amp;nbsp;strong)&amp;nbsp;NSString&amp;nbsp;*strongString;&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;@property&amp;nbsp;(nonatomic,&amp;nbsp;copy)&amp;nbsp;NSString&amp;nbsp;*copyedString;&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number4 index3 alt1&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;@end&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;上面的代码声明了两个字符串属性，其中一个内存特性是strong，一个是copy。下面我们来看看它们的区别。&lt;/p&gt;&lt;p&gt;首先，我们用一个不可变字符串来为这两个属性赋值，&lt;/p&gt;&lt;div&gt;&lt;div id=&quot;highlighter_30402&quot; class=&quot;syntaxhighlighter  js&quot;&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line number4 index3 alt1&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line number5 index4 alt2&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line number6 index5 alt1&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line number7 index6 alt2&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line number8 index7 alt1&quot;&gt;8&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;-&amp;nbsp;(void)test&amp;nbsp;{&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;&lt;code class=&quot;js spaces&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;NSString&amp;nbsp;*string&amp;nbsp;=&amp;nbsp;[NSString&amp;nbsp;stringWithFormat:@&lt;/code&gt;&lt;code class=&quot;js string&quot;&gt;&quot;abc&quot;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;];&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;&lt;code class=&quot;js spaces&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;self.strongString&amp;nbsp;=&amp;nbsp;string;&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number4 index3 alt1&quot;&gt;&lt;code class=&quot;js spaces&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;self.copyedString&amp;nbsp;=&amp;nbsp;string;&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number5 index4 alt2&quot;&gt;&lt;code class=&quot;js spaces&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;NSLog(@&lt;/code&gt;&lt;code class=&quot;js string&quot;&gt;&quot;origin&amp;nbsp;string:&amp;nbsp;%p,&amp;nbsp;%p&quot;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;,&amp;nbsp;string,&amp;nbsp;&amp;amp;string);&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number6 index5 alt1&quot;&gt;&lt;code class=&quot;js spaces&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;NSLog(@&lt;/code&gt;&lt;code class=&quot;js string&quot;&gt;&quot;strong&amp;nbsp;string:&amp;nbsp;%p,&amp;nbsp;%p&quot;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;,&amp;nbsp;_strongString,&amp;nbsp;&amp;amp;_strongString);&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number7 index6 alt2&quot;&gt;&lt;code class=&quot;js spaces&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;NSLog(@&lt;/code&gt;&lt;code class=&quot;js string&quot;&gt;&quot;copy&amp;nbsp;string:&amp;nbsp;%p,&amp;nbsp;%p&quot;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;,&amp;nbsp;_copyedString,&amp;nbsp;&amp;amp;_copyedString);&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number8 index7 alt1&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;}&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;其输出结果是：&lt;/p&gt;&lt;div&gt;&lt;div id=&quot;highlighter_135856&quot; class=&quot;syntaxhighlighter  js&quot;&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;3&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;origin&amp;nbsp;string:&amp;nbsp;0x7fe441592e20,&amp;nbsp;0x7fff57519a48&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;strong&amp;nbsp;string:&amp;nbsp;0x7fe441592e20,&amp;nbsp;0x7fe44159e1f8&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;copy&amp;nbsp;string:&amp;nbsp;0x7fe441592e20,&amp;nbsp;0x7fe44159e200&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;我们要以看到，这种情况下，不管是strong还是copy属性的对象，其指向的地址都是同一个，即为string指向的地址。如果我们换作MRC环境，打印string的引用计数的话，会看到其引用计数值是3，即strong操作和copy操作都使原字符串对象的引用计数值加了1。&lt;/p&gt;&lt;p&gt;接下来，我们把string由不可变改为可变对象，看看会是什么结果。即将下面这一句&lt;/p&gt;&lt;div&gt;&lt;div id=&quot;highlighter_365824&quot; class=&quot;syntaxhighlighter  js&quot;&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;1&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;NSString&amp;nbsp;*string&amp;nbsp;=&amp;nbsp;[NSString&amp;nbsp;stringWithFormat:@&lt;/code&gt;&lt;code class=&quot;js string&quot;&gt;&quot;abc&quot;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;];&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;改成：&lt;/p&gt;&lt;div&gt;&lt;div id=&quot;highlighter_667558&quot; class=&quot;syntaxhighlighter  js&quot;&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;1&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;NSMutableString&amp;nbsp;*string&amp;nbsp;=&amp;nbsp;[NSMutableString&amp;nbsp;stringWithFormat:@&lt;/code&gt;&lt;code class=&quot;js string&quot;&gt;&quot;abc&quot;&lt;/code&gt;&lt;code class=&quot;js plain&quot;&gt;];&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;其输出结果是：&lt;/p&gt;&lt;div&gt;&lt;div id=&quot;highlighter_149075&quot; class=&quot;syntaxhighlighter  js&quot;&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;3&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;line number1 index0 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;origin&amp;nbsp;string:&amp;nbsp;0x7ff5f2e33c90,&amp;nbsp;0x7fff59937a48&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number2 index1 alt1&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;strong&amp;nbsp;string:&amp;nbsp;0x7ff5f2e33c90,&amp;nbsp;0x7ff5f2e2aec8&lt;/code&gt;&lt;/div&gt;&lt;div class=&quot;line number3 index2 alt2&quot;&gt;&lt;code class=&quot;js plain&quot;&gt;copy&amp;nbsp;string:&amp;nbsp;0x7ff5f2e2aee0,&amp;nbsp;0x7ff5f2e2aed0&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;可以发现，此时copy属性字符串已不再指向string字符串对象，而是深拷贝了string字符串，并让_copyedString对象指向这个字符串。在MRC环境下，打印两者的引用计数，可以看到string对象的引用计数是2，而_copyedString对象的引用计数是1。&lt;/p&gt;&lt;p&gt;此时，我们如果去修改string字符串的话，可以看到：因为_strongString与string是指向同一对象，所以_strongString的值也会跟随着改变(需要注意的是，此时_strongString的类型实际上是NSMutableString，而不是NSString)；而_copyedString是指向另一个对象的，所以并不会改变。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 176, 80);&quot;&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;由于NSMutableString是NSString的子类，所以一个NSString指针可以指向NSMutableString对象，让我们的strongString指针指向一个可变字符串是OK的。&lt;/p&gt;&lt;p&gt;而上面的例子可以看出，当源字符串是NSString时，由于字符串是不可变的，所以，不管是strong还是copy属性的对象，都是指向源对象，copy操作只是做了次浅拷贝。&lt;/p&gt;&lt;p&gt;当源字符串是NSMutableString时，strong属性只是增加了源字符串的引用计数，而copy属性则是对源字符串做了次深拷贝，产生一个新的对象，且copy属性对象指向这个新的对象。另外需要注意的是，这个copy属性对象的类型始终是NSString，而不是NSMutableString，因此其是不可变的。&lt;/p&gt;&lt;p&gt;这里还有一个性能问题，即在源字符串是NSMutableString，strong是单纯的增加对象的引用计数，而copy操作是执行了一次深拷贝，所以性能上会有所差异。而如果源字符串是NSString时，则没有这个问题。&lt;/p&gt;&lt;p&gt;所以，在声明NSString属性时，到底是选择strong还是copy，可以根据实际情况来定。不过，一般我们将对象声明为NSString时，都不希望它改变，所以大多数情况下，我们建议用copy，以免因可变字符串的修改导致的一些非预期问题。&lt;/p&gt;
        &lt;p&gt;关于字符串的内存管理，还有些有意思的东西，可以参考&lt;a href=&quot;http://blog.cnbluebox.com/blog/2014/04/16/nsstringte-xing-fen-xi-xue-xi/&quot; target=&quot;_self&quot;&gt;NSString特性分析学习&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;



    &lt;/div&gt;
</content>
   </entry>
   
   <entry>
     <title>Auto Layout 使用心得 【转】</title>
     <link href="http://beiyuu.com/blog/2015/04/22/autolayout1.html"/>
     <updated>2015-04-22T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/04/22/autolayout1</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20150422/11632.html&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;转自：http://www.cocoachina.com/ios/20150422/11632.html&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;mainContentOfPage&quot;&gt;&lt;h2&gt;
&lt;a id=&quot;user-content-auto-layout-使用心得系列文章代码仓库&quot; class=&quot;anchor&quot; href=&quot;#auto-layout-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;《Auto Layout 使用心得》系列文章代码仓库&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;



&lt;h4&gt;
&lt;a id=&quot;user-content-1-auto-layout-使用心得一-初体验&quot; class=&quot;anchor&quot; href=&quot;#1-auto-layout-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E4%B8%80-%E5%88%9D%E4%BD%93%E9%AA%8C&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;1. &lt;a href=&quot;http://lvwenhan.com/ios/430.html&quot;&gt;Auto Layout 使用心得（一）—— 初体验&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
&lt;a id=&quot;user-content-2-auto-layout-使用心得二-实现三等分&quot; class=&quot;anchor&quot; href=&quot;#2-auto-layout-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E4%BA%8C-%E5%AE%9E%E7%8E%B0%E4%B8%89%E7%AD%89%E5%88%86&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;2. &lt;a href=&quot;http://lvwenhan.com/ios/431.html&quot;&gt;Auto Layout 使用心得（二）—— 实现三等分&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;搭建过程：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/436ae426ad98dd6ef07f1821a02b6a95e50893a1/687474703a2f2f6c7677656e68616e2e636f6d2f636f6e74656e742f75706c6f616466696c652f3230313530332f62356539313432353634373830302e676966&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/436ae426ad98dd6ef07f1821a02b6a95e50893a1/687474703a2f2f6c7677656e68616e2e636f6d2f636f6e74656e742f75706c6f616466696c652f3230313530332f62356539313432353634373830302e676966&quot; alt=&quot;pic&quot; data-canonical-src=&quot;http://lvwenhan.com/content/uploadfile/201503/b5e91425647800.gif&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
&lt;a id=&quot;user-content-3-auto-layout-使用心得三-自定义-cell-并使用-auto-layout&quot; class=&quot;anchor&quot; href=&quot;#3-auto-layout-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E4%B8%89-%E8%87%AA%E5%AE%9A%E4%B9%89-cell-%E5%B9%B6%E4%BD%BF%E7%94%A8-auto-layout&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;3. &lt;a href=&quot;http://lvwenhan.com/ios/441.html&quot;&gt;Auto Layout 使用心得（三）—— 自定义 cell 并使用 Auto Layout&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
&lt;a id=&quot;user-content-4-auto-layout-使用心得四-22-行代码实现拖动回弹&quot; class=&quot;anchor&quot; href=&quot;#4-auto-layout-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E5%9B%9B-22-%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%8B%96%E5%8A%A8%E5%9B%9E%E5%BC%B9&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;4. &lt;a href=&quot;http://lvwenhan.com/ios/442.html&quot;&gt;Auto Layout 使用心得（四）—— 22 行代码实现拖动回弹&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;效果：&lt;br /&gt;
&lt;a href=&quot;https://camo.githubusercontent.com/d6ea9c60c94facd653176f84f6de4c942581757d/687474703a2f2f6c7677656e68616e2e636f6d2f636f6e74656e742f75706c6f616466696c652f3230313530342f62356539313432373838333537302e676966&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/d6ea9c60c94facd653176f84f6de4c942581757d/687474703a2f2f6c7677656e68616e2e636f6d2f636f6e74656e742f75706c6f616466696c652f3230313530342f62356539313432373838333537302e676966&quot; alt=&quot;pic&quot; data-canonical-src=&quot;http://lvwenhan.com/content/uploadfile/201504/b5e91427883570.gif&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
&lt;a id=&quot;user-content-5-auto-layout-使用心得五-根据文字图片自动计算-uitableviewcell-高度&quot; class=&quot;anchor&quot; href=&quot;#5-auto-layout-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E4%BA%94-%E6%A0%B9%E6%8D%AE%E6%96%87%E5%AD%97%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E8%AE%A1%E7%AE%97-uitableviewcell-%E9%AB%98%E5%BA%A6&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;5. &lt;a href=&quot;http://lvwenhan.com/ios/449.html&quot;&gt;Auto Layout 使用心得（五）—— 根据文字、图片自动计算 UITableViewCell 高度&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;效果：&lt;br /&gt;
&lt;a href=&quot;https://camo.githubusercontent.com/1bf1439bd0ae913ee04b0e4285cc1a30fda2cb21/687474703a2f2f7374617469636f6e7361652e73696e616170702e636f6d2f696d616765732f352e676966&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1bf1439bd0ae913ee04b0e4285cc1a30fda2cb21/687474703a2f2f7374617469636f6e7361652e73696e616170702e636f6d2f696d616765732f352e676966&quot; alt=&quot;pic&quot; data-canonical-src=&quot;http://staticonsae.sinaapp.com/images/5.gif&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/article&gt;

</content>
   </entry>
   
   <entry>
     <title>12小时——我的第二个创业项目</title>
     <link href="http://beiyuu.com/blog/2015/04/18/p12.html"/>
     <updated>2015-04-18T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/04/18/p12</id>
     <content type="html">&lt;blockquote&gt;&lt;p style=&quot;
    color: gray;
&quot;&gt;一个好汉三个帮，一个良好的团队是成功的关键，产品，运营，推广，缺一不可。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;app&quot;&gt;app简介&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;app 下载地址 &lt;a href=&quot;https://appsto.re/cn/JK764.i&quot;&gt;12小时&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;团队成员：一个ios开发 + 一个后台 ＋ 一个美术 ＋ 一个CEO&lt;/li&gt;
  &lt;li&gt;社交型的应用，主要功能有2点
    &lt;ol&gt;
      &lt;li&gt;限时聊天，晚上18：00开始，到第二天早上6点结束，然后数据全部清空。&lt;/li&gt;
      &lt;li&gt;群组功能，每天有2-10个群组可供选择，不同群组间没有交互。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;感想&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;再小的团队也需要teambitious这样的工具来做辅助管理&lt;/strong&gt;&lt;br /&gt;
一开始的时候我们就建立了一个群，每天有什么工作或者其他需求的改动就在群里说一下，不过越来越多的需求和越来越大的工作量使得一个QQ群根本就没办法处理。
从提需求要做修改再到测试验证，还有各种其他不可预测的因素。&lt;br /&gt;
一个敏捷开发的工具真的是能给团队带来很大的帮助。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;一个产品需要一个产品经理&lt;/strong&gt;&lt;br /&gt;
就这个产品而言，前后台的交互以及美术的切图，还有测试的时候发现的各种bug，这些都是属于交接过程中的事情。&lt;br /&gt;
我作为ios开发攻城师，自然是前后端交互文档我来写，美术给我的psd我来切，测试发现了bug和我说，然后我再找原因fix。我就自然而然的担当起了产品经理这个角色。
    &lt;ul&gt;
      &lt;li&gt;美术是个刚毕业的大学生，没有很多的移动端的开发经验，给的psd有一部分是没有办法移植到手机客户端上边的。&lt;br /&gt;
切图就更加不用说了，代码实现的不同导致了切图的不同，最后基本就是美术给我个psd然后我切图修改。 &lt;br /&gt;
还有一些按钮需要一个highlight的状态，也都是我自己操作这ps慢慢画的。&lt;/li&gt;
      &lt;li&gt;后端的工程师以前做的是网页的后端，没有做过移动端的开发，以至于交互存在各种格式上的问题。&lt;br /&gt;
比如图片存储的接口调试了很久都没有办法成功，于是我就干脆用了七牛的图片存储。&lt;br /&gt;
ios中有写自带的表情（比如😊)是没办法在utf-8下找到对应的字符显示的，于是我们就参照百度贴吧(版本6.5.0)，把这些字符给过滤掉。&lt;br /&gt;
还有即时聊天socket和苹果的推送功能，我就用了一个第三方库，自己参照着写着js慢慢调试。&lt;/li&gt;
      &lt;li&gt;从一个产品的开始到提交app store也是我第一次的经理。之前都是跟着其他人做或者和其他人一起做，不会的可以问，现在只能百度谷歌。&lt;br /&gt;
在开发过程中还会遇到各种没有遇到以及没有预见的问题，可以说真的是鸭梨山大。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;团队很重要，甚至比产品还重要&lt;/strong&gt; &lt;br /&gt;
有的团队一个计划书就拿了100w的投资，有的团队demo出来了就能天使轮了。 &lt;br /&gt;
我们的CEO在产品appstore上架了依然没有融到资，他说他的前期费用是自己出的。 &lt;br /&gt;
我是每个月拿少量的生活费兼职做的，美术是拿工资全职，那个后台是没任何收入的兼职的。 &lt;br /&gt;
CEO是这么和我说的，不管他说的是真是假。我们在历经了4个月，从开始到appstore上线，每个人都付出了很多，最后却还没融到资，可以说每个人都有责任。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;前期的准备工作要做充分 &lt;br /&gt;&lt;/strong&gt;
就我ios而言，我原本以为第一个版本会很简单，只做了简单的架构，结果却发现内容还是比较多的，就第三方开源代码就用了14个，和后台的接口文档更是写了9页之多。&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;产品上线后的假数据 &lt;br /&gt;&lt;/strong&gt;
我们的产品上appstore上后，除去我们内部的人，先后一共有近50人安装过这个app，可是七日留存率是零，这个结果也是无可厚非的。&lt;br /&gt;
我们也没有重视这一块，再加上没有运营和推广，用户进去了，没有见到想见的美女帅哥，所以删应用也是很理所当然的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;后话&lt;/h2&gt;
&lt;p&gt;从项目开始到现在已经过去了半年左右了，我也和CEO提出了退出的申请。虽然他一再挽留，但是，我还是坚持我的决定。(美工是在做了一个月左右就离开了)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;原因主要还是融资的问题，暂且不说产品的原因，appsotre上线了还是融资不到，我觉得对于大部分创业者来说都是无法接受的。&lt;/li&gt;
  &lt;li&gt;其次，我们可以算是一个草根的创业团队，就我一个是移动端开发的，其他都是半路出道转移动端的，对我来说，真的是鸭梨山大啊。&lt;/li&gt;
  &lt;li&gt;我们团队缺少运营，产品上线了基本就无从下手，不知从何开始推广，大家都没有经验，试着去QQ群或者贴吧里拉人，根本就杯水车薪。&lt;/li&gt;
  &lt;li&gt;虽然这个项目是基本失败了，但是我学到的东西还是很多的，不仅是ios技术的提升，还有简单js的入门，还认识到了整个项目的架构的重要性。
我不善言辞，只有经历了才能体会的到。&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot; line-height: 0px; margin-bottom: 10px; &quot;&gt;&lt;/p&gt;

&lt;p&gt;总之，对次的创业我感觉我也成长了不，我也认识到了并不是一两个程序员就能搞定的，产品做出来了，还需要运营以及推广，团队是最重要的。  &lt;br /&gt;
创业真的是很艰苦的，九死一生一点都不夸张。&lt;/p&gt;

&lt;!-- 连接 --&gt;

</content>
   </entry>
   
   <entry>
     <title>几乎整个互联网行业都缺 CTO【转】</title>
     <link href="http://beiyuu.com/blog/2015/04/10/%E5%87%A0%E4%B9%8E%E6%95%B4%E4%B8%AA%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E9%83%BD%E7%BC%BA-cto.html"/>
     <updated>2015-04-10T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/04/10/几乎整个互联网行业都缺 CTO</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.niaogebiji.com/article-6557-1.html&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;转自：http://www.niaogebiji.com/article-6557-1.html&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;tbody&gt;&lt;tr&gt;&lt;td id=&quot;article_content&quot;&gt;&lt;div&gt;&lt;span style=&quot;line-height: 1.8em;&quot;&gt;几乎整个互联网行业都缺 CTO，特别是一些草根背景的创业者，这个问题更加显著。从我自己的感受，身边各种朋友委托我找 CTO 的需求，嗯，算下来超过两位数了，光最近一个月就有 3 个，而且这三家都是刚拿了 A 轮的。其他那些公司 CTO 大部分空缺了一两年，或者其他高管临时暂代过渡。实话说，我觉得每个公司都不错的，但通常也只能遗憾的说，真没有能推荐的。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;其实，根据个人的观察，每个互联网团队都喊需要 CTO，但是具体诉求却各不相同，如果说共性，就只有一点，那就是，公司老板对技术的期望值与目前技术团队的能力表现，有较大的差异，而这个差异，对于老板来说，就是一个想法，找个合格的 CTO，一切就都解决了。其实，真不是这回事。&lt;/div&gt;&lt;div&gt;&lt;b&gt;今天要说的第一点，就是期望值的控制&lt;/b&gt;&lt;/div&gt;&lt;div&gt;很多互联网公司都希望自己走技术驱动的路线，期望小而美，复制美国技术新贵的市场表现；这不能说是一个错误的期望，但是，现实能有多少符合这种需求的人才呢？这样的人才需要技术有前瞻性，对产业格局有判断，对管理有心得，情商还不能低（算了一下，四项里我至少三项不符合。）。整个行业内这样的人有几个？凭什么会跟你？事实上我身边确实有这样的案例，一个以业务为主的公司，搞定了一个超棒的 CTO，很快就转型成以技术为驱动的公司，公司价值极大提升，问题是，这种现象很难具有复制性。&lt;/div&gt;&lt;div&gt;&lt;b&gt;下面我说一下一个最基本的让人纠结的问题，到底什么是 CTO？&lt;/b&gt;&lt;/div&gt;&lt;div&gt;其实，空谈这个名词的定义毫无意义，从我身边很多朋友公司的实例来看，他们对这个角色的定义和定位是差异非常大的。具体而言，不同创业团队，对 CTO 需求的真实想法，包括如下层面。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;font size=&quot;4&quot;&gt;技术选型&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;这其实是创业公司最纠结的问题；他们往往一上来基于已有的程序员的个人习惯和爱好，选择了一个技术方案，然后到某一天一看，我靠，全是坑（当然，也可能与执行者的能力有关）。而更糟的是，这个技术方案相对冷门，市场上去招聘都很难做。还有就是技术方案成本过高，（不只是钱的问题，特别是时间成本！）结果严重影响到后续的发展速度。　我举个简单例子，最近我给多个创业者提建议，比如做 app，很多以内容运营为核心的 app，不要用原生态开发，目前一堆第三方的跨平台开发架构，如果选择合适，可以极大减少开发成本，以及降低技术招聘的难度。微信开店开社区，也有一堆第三方平台，这些事情，对于一些创业者来说，就是特纠结的事情，第一，他们并不完全了解这个领域；第二，他们就算有所了解，也很难判断究竟谁家的方案更靠谱？难道要靠百度竞价排名来裁决么？　而对于技术人员，包括相当多技术高手，他们也会有一些自己的打算，比如说，我就熟悉这个，为啥要用2我不熟悉的？（没有考虑从公司长远的人力成本和开发效率）。比如说，我本来服务端技术很强，现在用了一个开源服务端框架，比如 skynet，我变成写脚本的了，我价值怎么体现？（不知道自己的价值来自于产品的市场表现）。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;4&quot;&gt;&lt;b&gt;万能适配器&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;公司有了一个基本的起步，比如在某个平台上有了一点成绩，然后希望扩展到不同领域，不同平台，然后老板突然发现，哦，原来程序员不是什么都会的。服务端，前端，运维，安全，数据库，甚至 SEO 优化（你敢说这不是技术？）最好有个牛人都能带起来，这个牛人，就是他们定义的 CTO，咳咳。创业公司，人少而事杂，其实，真的可以理解。我认识不少创业者，最终万般无奈下，硬是把自己逼成了万能哥。话说当年我也是创业的时候，万般无奈才自学怎么做运维的，虽然很多都没学会，但是偶尔也能出去忽悠一下。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;4&quot;&gt;&lt;b&gt;性能调优及架构扩展&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;很多小公司到了一定的用户规模和并发规模的时候，一下子就扛不住了，甚至严重影响业务的拓展，某著名淘品牌自己做了一个独立网店，结果一搞秒杀活动就崩溃，（吐个槽，他们运营人员也死心眼，就知道搞秒杀，知道技术架构不行，不会搞点别的形式么）。结果独立网店一直就没搞起来。其实很多这些偏传统的互联网公司，他们所遇到的问题，在高手眼里不值一提，但是这个坎过不去，他们真就发展不起来。说个题外话八卦一下，当年腾讯叫OICQ的时候，一堆 *icq，只有腾讯牛了，其他的为啥不行？真的是产品原因么？其实都是这个问题，到了１００万用户的时候，就只有腾讯还能发展新用户，其他的技术全都撑不住了。大家看到的都是剩者为王，我看到的是，数不清非常不错的产品，死在这个环节上了。严格的说，这其实不是 CTO 的工作，按照分工来说，通常涉及系统分析师，系统架构师，以及 DBA 来做这方面的工作，但是对于创业公司，根本就没这种角色设定，他们遇到这个问题，通常想到的是，有个好的 CTO 就好了。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;4&quot;&gt;&lt;b&gt;团队管理和效率提升，这还真是 CTO 的本职工作了&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;我遇到技术出身的创业者，他纠结的问题是，当时自己一个人做开发，连带着做运营，七七八八一堆事，也把东西做起来了，现在公司产品知名度有了，拿到投资了，开发团队也搭起来了，怎么开发效率反而下去了？所以，他的理解是，需要一个 CTO。　从技术人才招聘，团队培养，技术培训，到开发模式培训（比如现在流行的敏捷开发），产品质量测评体系，信息安全防护等等，这些林林总总的事情，对于创业者来说，就全部归纳为“需要一个 CTO”，嗯。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;4&quot;&gt;&lt;b&gt;数据决策体系&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;自从“大数据”概念火了以后，基本上所有创业者都在谈，我的业务模式，发展了海量用户后，一定是基于数据驱动，可是数据咋驱动？没几个人真想清楚了，但是没关系，只要有 CTO，这个问题就解决了。　我知道真有能搞定此事的 CTO，真的有，不过，真的属于稀缺品种，目测比大熊猫还少。因为，要理解数据驱动，首先要理解业务，而理解业务，往往不是技术人员的特长。又要自吹一句，我在百度的时候，最牛逼的事情就是在产品部门里搭出一个技术团队，来做数据，为什么要坚持在产品部门编制？（实话说，当年技术部门的薪酬更高一些），我坚持认为重心在于数据目标和解读，而不是技术实现。　所以，这里我多说一句，数据决策体系，先想清楚具体目标和具体展现，再寻求技术支持，而不是一句话推给技术团队去弄，除非你公司里真有这么一只极品稀缺大熊猫。　实际上，再吐个槽，最基本的数据处理的结果，经过正确严谨的解读，就已经有极大的价值了，而很多人往往无视这些，去追求更高深的技术实现，搞一些莫名其妙的算法和逻辑，来彰显技术价值，其实是舍近求远的表现。　&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;4&quot;&gt;&lt;b&gt;重构商业模式&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;这个，咳咳，怎么说呢，公司觉得自己商业模式不够酷，不够吸引资本关注，希望从业务驱动转为技术驱动，嗯，来个牛逼的 CTO，这事真可行，嗯，话说，这事真可行，点到为止，不展开了。　&lt;/div&gt;&lt;div&gt;以上是我观测到的，身边以及业内一些典型的 CTO 需求，当然，不同公司诉求真的不一样。有的侧重管理，有的侧重解决瓶颈问题，但是对老板而言，只要他们认为目前技术团队不够好，不够给力，不够预期，那么，这就是他们认为缺乏的，CTO。不仅仅是创业公司，上市公司乃至巨头，这个问题也一样存在，比如说，百度的 CTO，貌似空缺了好几年呢。是他们的人才不够优秀么？还不是达不到李厂长期望值。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;下面说我的一些观点&lt;/div&gt;&lt;div&gt;&lt;b&gt;第一、&lt;/b&gt;&lt;span style=&quot;line-height: 1.8em;&quot;&gt;相当比例大公司背景的技术牛人，并不适合去创业公司做 CTO，原因&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;1：技术再牛，不够全面，这没辙，大公司求深，创业公司求全&lt;/div&gt;&lt;div&gt;2：技术再牛，要懂业务。&lt;/div&gt;&lt;div&gt;创业公司没有完备严谨的产品经理，没有明确的目标规划，很多工作是一个初步的目标，然后做起来看。如果技术人员不懂业务，很可能就会走弯路，做出很多不伦不类的东西，所以创业公司遇到这样的大牛，要先沟通到位再决定，不要迷信简历，当然，不乏这里有非常出色的。&lt;/div&gt;&lt;div&gt;&lt;b&gt;第二、&lt;/b&gt;&lt;span style=&quot;line-height: 1.8em;&quot;&gt;创始公司老板要想清楚自己当前真正需要的是什么，控制一下目标和欲望，有些事不能强求的&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;第三、&lt;/b&gt;&lt;span style=&quot;line-height: 1.8em;&quot;&gt;要给人才成长的空间，CTO 也不是天生的，不要认为外面的和尚一定好念经。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;第四、&lt;/b&gt;&lt;span style=&quot;line-height: 1.8em;&quot;&gt;遇到真的特别合适的人才，要舍得本钱，理想可以谈，但是让人家舍弃各种丰厚回报的机会来跟你打拼，总要出示一些诚意。要知道这样的人才是稀缺品。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;line-height: 1.8em;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;最后解释一下 CTO 所需要的四个领域的能力&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;技术前瞻性&lt;/b&gt;&lt;/div&gt;&lt;div&gt;就好比 2010 年谷歌手机发布了，您还在那里吭哧吭哧跟老板说咱们好好弄塞班。（好多技术牛人，大公司的技术总监都是这样的！！！）。&lt;/div&gt;&lt;div&gt;&lt;b&gt;对产业格局有判断&lt;/b&gt;&lt;/div&gt;&lt;div&gt;举例来说，移动互联网起来了，能知道工具型，娱乐性，生活性的应用大概的爆发周期和爆发规模。 能对移动游戏，电商的发展速度和市场顶点在哪里，这样才能给老板正确的技术投入建议和规划目标建议，别市场喷发的时候不去考虑准备架构扩容，还在角落里扣扣索索的算怎么比同行省点运维成本。&lt;/div&gt;&lt;div&gt;&lt;b&gt;管理心得&lt;/b&gt;&lt;/div&gt;&lt;div&gt;技术团队的培养和带动，别光顾着自己牛逼，要让团队牛逼。&lt;/div&gt;&lt;div&gt;&lt;b&gt;情商&lt;/b&gt;&lt;/div&gt;&lt;div&gt;各种沟通，协调，不解释。&lt;/div&gt;&lt;div&gt;就这样，有点凌乱，凑活看吧。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

</content>
   </entry>
   
   <entry>
     <title>apple watch 预言</title>
     <link href="http://beiyuu.com/blog/2015/04/07/applewatch.html"/>
     <updated>2015-04-07T00:00:00+08:00</updated>
     <id>http://beiyuu.com/blog/2015/04/07/applewatch</id>
     <content type="html">&lt;blockquote&gt;&lt;p style=&quot;
    color: gray;
&quot;&gt;今天是4.7，离4.10还有3天。
&lt;br /&gt;
我预言apple watch会火，至少不会死。
&lt;br /&gt;
鄙视网上各种说了一大堆理由而不做结论的文章。&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;转一片36kr的文章:  &lt;a href=&quot;http://36kr.com/p/531427.html&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;为什么说苹果表一定会死&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;section class=&quot;single-post-header&quot;&gt;&lt;div class=&quot;single-post-header__headline&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;image&quot; height=&quot;337&quot; src=&quot;http://a.36krcnd.com/nil_class/583f3b46-7028-4ab0-a559-da0a382c8633.jpg&quot; width=&quot;620&quot; /&gt;&lt;/div&gt;&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;为什么说苹果表一定会死&lt;/h2&gt;

&lt;section class=&quot;article&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;苹果表发布也有段时间了，而关于这块表到底如何也一直争论不休：正方从各个角度去说这块手表如何如何不好，什么性能低下续航垃圾一块电子表也好意思挑战奢侈表；而反方举起自己的大旗帜，拿出当年骂iPhone的诺基亚的下场，拿出当年骂iPad的人的ID，再拿出初代的苹果电脑ebay上的拍卖价格，高喊着你们这帮胆敢阻碍历史前进，可穿戴时代来临的蛆虫，一定会被碾得粉碎……&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;但是，我仍要说，这款手表是个垃圾，它注定失败。可穿戴时代，不是苹果这种保守表能够带领起来的。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;当然，不列论据就是耍流氓。接下来就来看看，为什么这款手表注定失败。&lt;/p&gt;&lt;p&gt;不过在看失败之前，我们先来看看  iPhone 和iPad 为什么成功了。&lt;/p&gt;&lt;p&gt;其实，我觉得  iPhone 时代和  iPad 时代，对着苹果唱反调的都是属于科技宅、各种技术行家，事实上那个时候，普通民众并不关心苹果也不关注苹果，那时苹果的品牌影响力相比今天差得太远。在那个时代，苹果的哲学是如何把人们每天要用的东西做到极致，而不是像技术专家们那样，自己有什么需求就打造一个东西把那个专门需求完全满足。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;而手机，则正是人们一定要用的东西。假设当年没有苹果，今天一样会人手一部手机，即便一直停留在诺基亚智能机时代。这个，你可以直接去看看手机市场在  iPhone 之前的发展幅度就能很清楚。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;而苹果，要做的并不是创造不存在的东西，而是在已经相对成熟的手机市场里给人们选择它的理由。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;而苹果给出的答案就是轻娱乐。&lt;/p&gt;&lt;p&gt;如今的地铁上，放眼望去，人们拿着手机就是看视频、看小说、玩游戏。所有的东西都可以碎片化轻度化，随时抽离，无聊时又能回来。人们不需要engagement，不需要强烈的沉浸感代入感，人们不想在公众面前展示自己真实的体验感受，只希望能够默默地装逼，一边看着自己的手机，斜眼看着旁边的人在玩啥。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;我记得我刚上大学时候，对手机完全没有兴趣，满脑子想的都是新的mp4。经常上中关村在线看新的mp4新闻，看着哪款蓝魔台电mp4又支持了哪种新的视频格式，是不是支持pdf，一如你们今天刷36氪。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;而我的舍友看手机，后来还买了个psp。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;于那时的我而言，我觉得能随时随地看视频是再幸福不过的事；听歌是基本要求，至于游戏我主要玩PC游戏所以psp这种看起来很复杂的东西我就没关注过。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;但是，那时的我们都已经在渴求着有一个能够随身携带、消除坐车无聊的个人娱乐中心，我是视频和图书，而我舍友是游戏。对于在大城市成天上下班赶地铁的人来说，这是绝对的刚需。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;然后，iPhone 就是满足了这些刚需，把这些每个人都希望有的功能整合到了一起。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;没错，就是每个人都希望有的功能  – 因为这些功能没有学习门槛，我们从小就知道它们是娱乐。证据就是，为了随时看视频出现了mp4这种产品，为了随身玩游戏出现了psp、3ds这种产品，为了看电子书，即便是后来居上的kindle都竟然又从ipad手中分走了一片江山。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;iPhone在那个时代把这些功能都整合到一起，带来了整个移动互联网的兴起，这几乎是必然的。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;当然，更大的争议是在  iPad 上。iPad 其实就是  iPhone 娱乐功能的升级版。即便是在mp4时代，我们已经在关注mp4的屏幕尺寸大小，因此初代的iPhone就屏幕本身肯定是满足不了那些天天消费视频、电子书和游戏的人的。iPad 为的就是满足这个。而手机越来越大，现在基本稳定在5-6寸之间，原因其实就是便携性和看视频、看书体验平衡的一个甜点而已，一旦满足之后，大家发现也懒得拿起  iPad 了。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;这两款产品，成功得如此轻松而又必然，实际上也一点不出人意料。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;但是这款苹果表，是完全没有以上属性的。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;让我们慢慢来  – 首先，这是一块手表吗？&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;当然不是，关于这个话题争论得已经比较清楚了，手表本身的功能  – 看时间早就没有了，现在的传统手表代表的是身份地位，或者说  – 情怀，不可能被这种廉价的电子表所撼动，尤其在电子产品必须一年一换的前提下。当然，有人提到苹果表能让年轻人和中年人在身份地位的对拼中转换战场。这是个有意思的提法，不过现实中影响不大。的确，当你和富豪接触多了你会发现对于电子产品他们大多没有什么敏感度，倒不是因为他们是土豪，而是因为他们生活中有太多东西值得关注，而不是这种电子产品。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;那么，这到底是什么呢？&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;它只有一个定位可以走：成为一个个人中心。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;戴在手上，随时跟踪你的一举一动，知道你的位置，知道你的状态，你的身体健康，同时提供服务……一个健康向上的科幻未来设想中的美好道具。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;除了，它一点用也没有已。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;我们来看看：目前苹果表续航只有6个小时。一天一冲是必然的。当然，我们相信技术的演变，说不定哪天电池技术大革命，或者无线充电WIFI化，这都不是问题。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;那我们再看看更重要的：现在苹果官方建议每个app一次让人的浏览时间不超过10秒。这能干什么？这样的话我在旅途中，还是得掏出手机/平板来解决无聊问题。嗯，没关系，我们假设苹果逆天，手表未来带投影功能（那么我们在地铁上就为面积打架了）。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;而作为个人中心，不可否认取代银行卡/公交卡等等还是非常方便的，这也是我觉得手环这种奇葩设备唯一可能有用的点 – 而这个关键更大的推动层面会在政府，而非个人。不过，这些东西，手机上也一定都会有。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;因此，关键点之一来了：我们把苹果表和手机一对比，发现了在个人中心这个定义下的一些尴尬竞争：在目前科技方面的任何创意和应用，如果能放到手表上，在手机上绝对会先出现。比如说，各种取代银行卡的应用/支付系统，各种监控身体状况的传感器/计步器，这些都会先在手机上进行试水。这并不光光是看这个功能合适不合适的问题，而是手机厂商处于创新压力下，必然会做的事情。而作为个人中心，很重要的是和人的亲近感，手机早已不是问题，手表看起来离人更近，但这点差距对于如今的产品路线来说已经造不成什么影响。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;表能得到的研发资源，很难超过手机 – 那么多大厂需要靠手机活，但现在除了 Pebble 这种就是要踏可穿戴热潮的初创企业，没有几个厂是靠电子表活的。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;这就直接意味着，在个人中心这个层面，手表很难取代手机。电子设备这条路上，手机将还是会占据第一考虑位置，而不是手表。如果你要添置电子产品，你首先考虑的是手机，然后可能是平板/笔记本/个人台式，最后无聊了就是钱多任性了才会是手表。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;那我们如果假设手机和手表在技术方面齐头并进，一直到手机的功能早就过剩，而手表终于能满足人的日常使用了，那么表是不是就翻身农奴当家了呢？&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;当然不是，反而  – 到了这一天，它的末日就基本来了。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;假设有一天，在一块手表的 Form factor 里，我们也能满足我们日常的一切需求，能投影看视频，能社交，玩游戏，放ppt，甚至编辑文档视频，毫无担心续航问题……&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;这个时候我们会问的是，一个智能眼镜能干什么？&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;AR/VR 必将成为众人眼中的未来。那个时候，我们天天追逐的对象，必须就是新款的眼镜  -想想，微软最终的 Hololens 和同年发布的苹果表摆在你面前，你要哪个？&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;而苹果表，也只能放在角落里搓灰了吧。&lt;/p&gt;&lt;/section&gt;

</content>
   </entry>
   
   <entry>
     <title>abc</title>
     <link href="http://beiyuu.com/mine/2015/04/04/sylarcv.html"/>
     <updated>2015-04-04T00:00:00+08:00</updated>
     <id>http://beiyuu.com/mine/2015/04/04/sylarCV</id>
     <content type="html">
</content>
   </entry>
   
 
</feed>
